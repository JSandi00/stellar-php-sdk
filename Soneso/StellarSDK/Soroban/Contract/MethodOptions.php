<?php declare(strict_types=1);

// Copyright 2025 The Stellar PHP SDK Authors. All rights reserved.
// Use of this source code is governed by a license that can be
// found in the LICENSE file.

namespace Soneso\StellarSDK\Soroban\Contract;

use Soneso\StellarSDK\AbstractTransaction;

/**
 * Options for a smart contract method invocation.
 */
class MethodOptions
{

    /**
     * @var int $fee The fee to pay for the transaction in Stoops. Default 100.
     */
    public int $fee;
    /**
     * @var int $timeoutInSeconds The timebounds which should be set for transactions generated by the
     *  contract client. Default 300
     */
    public int $timeoutInSeconds;

    /**
     * @var bool $simulate Whether to automatically simulate the transaction when constructing the
     *  AssembledTransaction. Default true.
     */
    public bool $simulate;

    /**
     * @var bool $restore If true, will automatically attempt to restore the transaction if there
     *  are archived entries that need renewal. Default false.
     */
    public bool $restore;

    /**
     * @param int $fee The fee to pay for the transaction in Stoops. Default 100.
     * @param int $timeoutInSeconds The timebounds which should be set for transactions generated by the
     *   contract client. Default 300
     * @param bool $simulate Whether to automatically simulate the transaction when constructing the
     *   AssembledTransaction. Default true.
     * @param bool $restore If true, will automatically attempt to restore the transaction if there
     *   are archived entries that need renewal. Default false.
     */
    public function __construct(int $fee = AbstractTransaction::MIN_BASE_FEE,
                                int $timeoutInSeconds = 300,
                                bool $simulate = true,
                                bool $restore = true)
    {
        $this->fee = $fee;
        $this->timeoutInSeconds = $timeoutInSeconds;
        $this->simulate = $simulate;
        $this->restore = $restore;
    }

}